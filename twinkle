void TwinkleCane() {
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  FastLED.show();
  for (int i = 0; i < NUM_LEDS; i += 5) leds[i] = CRGB::Red;
  for (int i = 1; i < NUM_LEDS; i += 5) leds[i] = CRGB::Red;
  for (int i = 2; i < NUM_LEDS; i += 5) leds[i] = CRGB::Green;
  for (int i = 3; i < NUM_LEDS; i += 5) leds[i] = CRGB::Green;
  FastLED.show();
  CRGB last;
  int std;
  int stdRisk=80;
  while (currentFunction == "CandyCane") {
    EVERY_N_MILLISECONDS(250) {
      last = leds[0];
      for (int i = 0; i < NUM_LEDS - 1; i++) leds[i] = leds[i + 1];
      leds[NUM_LEDS - 1] = last;
      client.loop();
    }
    if (random8() < stdRisk) {
      std = random16(NUM_LEDS)-1;
      last = leds[std];
      leds[std] = CRGB::White;
      FastLED.show();
      leds[std] = last;
    } else FastLED.show();
    delay(20);
  }
}
